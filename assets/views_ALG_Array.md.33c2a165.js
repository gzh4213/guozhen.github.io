import{_ as s,o as a,c as n,M as l}from"./chunks/framework.3d15f885.js";const d=JSON.parse('{"title":"数组","description":"","frontmatter":{},"headers":[],"relativePath":"views/ALG/Array.md","filePath":"views/ALG/Array.md","lastUpdated":1700905769000}'),p={name:"views/ALG/Array.md"},o=l(`<h1 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h1><h2 id="栈" tabindex="-1">栈 <a class="header-anchor" href="#栈" aria-label="Permalink to &quot;栈&quot;">​</a></h2><p>一个后进先出的数据结构，在JS中没有真正的栈，可以通过数组模拟</p><h2 id="_1-已知有序数组-返回和位目标值的数字" tabindex="-1">1.已知有序数组，返回和位目标值的数字 <a class="header-anchor" href="#_1-已知有序数组-返回和位目标值的数字" aria-label="Permalink to &quot;1.已知有序数组，返回和位目标值的数字&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// var arr=[1,2,3,4,5]; var target=6; //返回 [2,4]</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">left</span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">right</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">arr</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">left</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;">arr</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">right</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">sum</span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">arr</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">left</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">arr</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">right</span><span style="color:#F07178;">]]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">sum</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#BABED8;">right</span><span style="color:#89DDFF;">--;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#BABED8;">left</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_2-算法反转数组-每个位置的首字母大小写顺序保留" tabindex="-1">2.算法反转数组，每个位置的首字母大小写顺序保留； <a class="header-anchor" href="#_2-算法反转数组-每个位置的首字母大小写顺序保留" aria-label="Permalink to &quot;2.算法反转数组，每个位置的首字母大小写顺序保留；&quot;">​</a></h2><p>[&#39;Tom&#39;, &#39;jame&#39;, &#39;david&#39;, &#39;Adam&#39;, &#39;alex&#39;] =&gt; [&#39;Alex&#39;,&#39;&#39;adam&#39;,&#39;david&#39;,&#39;Jame&#39;,&#39;tom&#39;]</p>`,7),e=[o];function r(t,c,y,F,i,D){return a(),n("div",null,e)}const m=s(p,[["render",r]]);export{d as __pageData,m as default};
