import{_ as e,o as a,c as r,M as o}from"./chunks/framework.3d15f885.js";const u=JSON.parse('{"title":"如何更新本地安装的包","description":"","frontmatter":{},"headers":[],"relativePath":"views/node/npm/version.md","filePath":"views/node/npm/version.md","lastUpdated":1700905769000}'),n={name:"views/node/npm/version.md"},p=o('<h1 id="如何更新本地安装的包" tabindex="-1">如何更新本地安装的包 <a class="header-anchor" href="#如何更新本地安装的包" aria-label="Permalink to &quot;如何更新本地安装的包&quot;">​</a></h1><p>定期更新你的应用所依赖的包（package）是个好习惯。因为依赖包的开发者更新了代码，你的应用也就能够获得提升。</p><p>为了完成这个任务需要：</p><p>1.在 <code>package.json</code> 文件所在的目录中执行 <code>npm update</code> 命令。 2.执行 <code>npm outdated</code> 命令。不应该有任何输出。</p><h1 id="npm-version-指令" tabindex="-1">npm version 指令 <a class="header-anchor" href="#npm-version-指令" aria-label="Permalink to &quot;npm version 指令&quot;">​</a></h1><h2 id="了解-version" tabindex="-1">了解 version <a class="header-anchor" href="#了解-version" aria-label="Permalink to &quot;了解 version&quot;">​</a></h2><p>1.0.0-0</p><p>主版本号(major).次版本号(minor).修订号(patch)-预发布号(release)</p><p>优先级以此递减，每次修改前面版本号都会影响后面版本号，所以谨慎操作</p><h2 id="升级预发布号-npm-version-prerelease" tabindex="-1">升级预发布号 npm version prerelease <a class="header-anchor" href="#升级预发布号-npm-version-prerelease" aria-label="Permalink to &quot;升级预发布号 npm version prerelease&quot;">​</a></h2><p>首次执行</p><p>1.0.0 -&gt; 1.0.0-0</p><p>再次执行</p><p>1.0.0 -&gt; 1.0.0-1</p><h2 id="升级修订号-保留预发布号" tabindex="-1">升级修订号，保留预发布号 <a class="header-anchor" href="#升级修订号-保留预发布号" aria-label="Permalink to &quot;升级修订号，保留预发布号&quot;">​</a></h2><p><code>npm version prepatch</code></p><p>执行结果</p><p>1.0.0-1 -&gt; 1.0.1-0</p><h2 id="升级次版本号-保留预发布号" tabindex="-1">升级次版本号，保留预发布号 <a class="header-anchor" href="#升级次版本号-保留预发布号" aria-label="Permalink to &quot;升级次版本号，保留预发布号&quot;">​</a></h2><p><code>npm version preminor</code></p><p>执行结果</p><p>1.0.1-0 -&gt; 1.1.0-0</p><h2 id="升级主版本号-保留预发布号" tabindex="-1">升级主版本号，保留预发布号 <a class="header-anchor" href="#升级主版本号-保留预发布号" aria-label="Permalink to &quot;升级主版本号，保留预发布号&quot;">​</a></h2><p><code>npm version premajor</code></p><p>执行结果</p><p>1.1.0-0 -&gt; 2.0.0-0</p><h2 id="升级修订号-npm-version-patch" tabindex="-1">升级修订号 npm version patch <a class="header-anchor" href="#升级修订号-npm-version-patch" aria-label="Permalink to &quot;升级修订号 npm version patch&quot;">​</a></h2><p>首次执行</p><p>2.0.0-0 -&gt; 2.0.0</p><p>再次执行</p><p>2.0.0 -&gt; 2.0.1</p><h2 id="升级次版本号-npm-version-minor" tabindex="-1">升级次版本号 npm version minor <a class="header-anchor" href="#升级次版本号-npm-version-minor" aria-label="Permalink to &quot;升级次版本号 npm version minor&quot;">​</a></h2><p>执行结果</p><p>2.0.1 -&gt; 2.1.0</p><h2 id="升级主版本号-npm-version-major" tabindex="-1">升级主版本号 npm version major <a class="header-anchor" href="#升级主版本号-npm-version-major" aria-label="Permalink to &quot;升级主版本号 npm version major&quot;">​</a></h2><p>执行结果</p><p>2.1.0 -&gt; 3.0.0</p>',37),i=[p];function t(s,d,h,c,m,l){return a(),r("div",null,i)}const _=e(n,[["render",t]]);export{u as __pageData,_ as default};
