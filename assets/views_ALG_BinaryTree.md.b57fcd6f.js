import{_ as a,o as e,c as l,M as i}from"./chunks/framework.3d15f885.js";const m=JSON.parse('{"title":"二叉树","description":"","frontmatter":{},"headers":[],"relativePath":"views/ALG/BinaryTree.md","filePath":"views/ALG/BinaryTree.md","lastUpdated":1700905769000}'),t={name:"views/ALG/BinaryTree.md"},r=i('<h1 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h1><h2 id="种类" tabindex="-1">种类 <a class="header-anchor" href="#种类" aria-label="Permalink to &quot;种类&quot;">​</a></h2><ul><li>满二叉树 如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。</li></ul><p>也可以说深度为k，有2^k-1个节点的二叉树。</p><ul><li>完全二叉树</li><li>二叉搜索树</li><li>平衡二叉搜索树</li></ul><h2 id="存储方式" tabindex="-1">存储方式 <a class="header-anchor" href="#存储方式" aria-label="Permalink to &quot;存储方式&quot;">​</a></h2><ul><li><p>链式存储</p></li><li><p>线式存储 2*i + 1</p></li></ul><h2 id="二叉树遍历" tabindex="-1">二叉树遍历 <a class="header-anchor" href="#二叉树遍历" aria-label="Permalink to &quot;二叉树遍历&quot;">​</a></h2><ul><li>深度优先遍历</li><li>广度优先遍历</li></ul><p>方式</p><ul><li>递归：一入递归深似海 <ul><li>确定递归函数的参数和返回值</li><li>确定终止条件</li><li>单层递归的逻辑</li></ul></li><li>迭代 *</li></ul><h3 id="二叉树-判断是不是对称" tabindex="-1">二叉树，判断是不是对称 <a class="header-anchor" href="#二叉树-判断是不是对称" aria-label="Permalink to &quot;二叉树，判断是不是对称&quot;">​</a></h3>',12),o=[r];function n(s,h,d,c,u,_){return e(),l("div",null,o)}const f=a(t,[["render",n]]);export{m as __pageData,f as default};
